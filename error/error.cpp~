#include "../util.hpp"

int u::line = -1; // iniciatlization

bool u::error::header = true; // initializing
char u::error::ErrorInfo[];
char u::error::ErrorMsg[];
bool u::error::has_trace = false;
FILE* u::error::trace = nullptr;
static u::error _error;

u::error&
u::error::msg(
	const int line,
	const int line_call_me,
	const char *type,
	const char *file,
	const char *func,
	const char *check_args, ...)
{
  //////////////////////////////////////////////////////////////////////////////
  // file & line & function information
  //////////////////////////////////////////////////////////////////////////////
  // 1024 - is a size of string ErrorInfo - always check this size
  // se a string resultante for maior que o size of string o restante que é maior será descartado
	if(line_call_me < 0) {
		snprintf(ErrorInfo, 1024, "\"%s\" (%d, \"%s\")", func, line, file);
			
	} else {
		snprintf(ErrorInfo, 1024, "[[%d]] \"%s\" (%d, \"%s\")", 
			line_call_me, func, line, file);
		/*snprintf(ErrorInfo, 1024, "[called in line %d] \"%s\" (%d, \"%s\")", 
		snprintf(ErrorInfo, 1024, "[run time parent func line %d call] \"%s\" (%d, \"%s\")", 
		line_call_me, func, line, file);
		*/
	}
  //////////////////////////////////////////////////////////////////////////////
  // user msg information
  //////////////////////////////////////////////////////////////////////////////
  	if(header)
  	{
		show_header(type);
		header = false;
	}
	
	if(check_args == nullptr) { //va_list msgUserArgs is empty
		fprintf(stderr, "%s\n", ErrorInfo);
		if(has_trace) fprintf(trace, "%s<br/>", ErrorInfo);
	}
	else if(strcmp(check_args, "") == 0) { // va_list msgUserArgs is empty -> by macro
		fprintf(stderr, "%s\n", ErrorInfo);
		if(has_trace) fprintf(trace, "%s<br/>", ErrorInfo);
	}
	else
	{
		va_list msgUserArgs;
		va_start(msgUserArgs, check_args);
		char *msgUser = va_arg(msgUserArgs, char*);
	
		vsnprintf(ErrorMsg, 4096, msgUser, msgUserArgs); // size of ErrorMsg - 4096
	
		if(strlen(ErrorMsg) < 1) {
			fprintf(stderr, "%s\n", ErrorInfo);
			if(has_trace) fprintf(trace, "%s<br/>", ErrorInfo);
		} else {
			fprintf(stderr, "%s\n%s\n", ErrorMsg, ErrorInfo);
			if(has_trace) fprintf(trace, "%s\n%s<br/>", ErrorMsg, ErrorInfo);
		}
		va_end(msgUserArgs);
  }
  	
	return _error;
}

void
u::error::set_header(bool header)
{
	error::header = header;
}

void
u::error::show_header(const char *type)
{
	//////////////////////////////////////////////////////////////////////////////
	// time information
	//////////////////////////////////////////////////////////////////////////////
	time_t timer = time(nullptr);
	const char *strTimer = asctime(localtime(&timer));
	
	fprintf(stderr, "\n");
	fprintf(stderr, "*************************************\n");
	if(strcmp(type, "WARNING") == 0) {
		fprintf(stderr, "***********  WARNING MSG  ***********\n");
	} else {
		fprintf(stderr, "************  %s MSG  ************\n", type);
	}
	fprintf(stderr, "*************************************\n");
	fprintf(stderr, "TIME %s: %s", type, strTimer);
	
	if(has_trace)
	{
		fprintf(trace, "<br/>");
		fprintf(trace, "*************************************<br/>");
		if(strcmp(type, "WARNING") == 0) {
			fprintf(trace, "***********  WARNING MSG  ***********<br/>");
		} else {
			fprintf(trace, "************  %s MSG  ************<br/>", type);
		}
		fprintf(trace, "*************************************<br/>");
		fprintf(trace, "TIME %s: %s<br/>", type, strTimer);
	}
}

u::error&
u::error::msgv(
	const int line,
	const int line_call_me,
	const char *type,
	const char *file,
	const char *func,
	const char *msg,
	const char *msg_va,
	va_list arg)
{
  //////////////////////////////////////////////////////////////////////////////
  // file & line & function information
  //////////////////////////////////////////////////////////////////////////////
  // 1024 - is a size of string ErrorInfo - always check this size
  // se a string resultante for maior que o size of string o restante que é maior será descartado
	if(line_call_me < 0) {
		snprintf(ErrorInfo, 1024, "\"%s\" (%d, \"%s\")", func, line, file);
	} else {
		snprintf(ErrorInfo, 1024, "[[%d]] \"%s\" (%d, \"%s\")", 
			line_call_me, func, line, file);
		/*snprintf(ErrorInfo, 1024, "[called in line %d] \"%s\" (%d, \"%s\")", 
		snprintf(ErrorInfo, 1024, "[run time parent func line %d call] \"%s\" (%d, \"%s\")", 
		line_call_me, func, line, file);
		*/
	}
  //////////////////////////////////////////////////////////////////////////////
  // user msg information
  //////////////////////////////////////////////////////////////////////////////
  	if(header)
  	{
		show_header(type);
		header = false;
	}
	
	if(msg_va == nullptr) { //va_list msgUserArgs is empty
		fprintf(stderr, "%s\n%s\n", msg, ErrorInfo);
		if(has_trace) fprintf(trace, "%s\n%s<br/>", msg, ErrorInfo);
	}
	else if(strcmp(msg_va, "") == 0) { // va_list msgUserArgs is empty -> by macro
		fprintf(stderr, "%s\n%s\n", msg, ErrorInfo);
		if(has_trace) fprintf(trace, "%s\n%s<br/>", msg, ErrorInfo);
	}
	else
	{
		vsnprintf(ErrorMsg, 4096, msg_va, arg); // size of ErrorMsg - 4096
	
		if(strlen(ErrorMsg) < 1) {
			fprintf(stderr, "%s\n%s\n", msg, ErrorInfo);
			if(has_trace) fprintf(trace, "%s<br/>", ErrorInfo);
		} else {
			fprintf(stderr, "%s\n%s\n%s\n", msg, ErrorMsg, ErrorInfo);
			if(has_trace) fprintf(trace, "%s<br/>%s\n%s<br/>", msg, ErrorMsg, ErrorInfo);
		}
		va_end(arg);
  	}
  	
	return _error;
}

void
u::error::set_trace(bool trace)
{
	if(trace == false)
	{
		has_trace = false;
		return;
	}
	// não faz nada pois caso contrário poderia resetar e perder
	// todo o conetúdo que já foi gravado
	if(has_trace) return;
	
	has_trace = true;
	u::error::trace = u::tmpfile();
}

char*
u::error::get_trace(void)
{
	if(trace == nullptr) return nullptr;
	
	std::rewind(trace);
	return u::file::toStr(trace);
}


















